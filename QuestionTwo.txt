2. Stream API. Лямбда-выражения. Основные методы создания, трансформации и агрегации данных.


Операции с потоками бывают либо терминальными, либо промежуточными:
Промежуточные - обрабатывают поступающие элементы и возвращают стрим.Промежуточных операторов в цепочке обработки элементов может быть много.
Терминальные - обрабатывают элементы и завершают работу стрима, так что терминальный оператор в цепочке может быть только один.

---- Лямбда-выражения

Метод, которую можно передавать в качестве аргумента другим методам.
Имеет лямбда-оператор "->". Он делит выражение на две части:
-левая часть хранит список параметров
-правая часть - это тело.

Например:
List<Integer> numbers = Arrays.asList(1, 2, 3);
numbers.forEach(n -> System.out.println(n));

---- Основные методы
Создание:
stream() для коллекций

Stream.of()

Stream.generate()

Stream.iterate()


Трансформация:
map()
Преобразует элементы. Принимает в качестве аргумента функциональный интерфейс Function.
Возвращает новый поток, который содержит преобразованные элементы.

filter()
Отбирает элементы, соответствующие условию. Используется для создания нового потока, включающего элементы, которые
соответствуют условию. Принимает функциональный интерфейс Predicate.

sorted()
Сортирует элементы. Создает новый поток, который содержит отсортированные элементы исходного потока.

Агрегация:
forEach()
Выполняет действия для каждого элемента.