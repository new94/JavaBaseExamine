Параметризация типов. Ковариантность. Контрвариатность. Инвариатность. Использование WildCard.

Параметризованные типы позволяют объявлять классы, интерфейсы и методы, где тип данных, которыми они оперируют, указан в виде параметра. Используя дженерики, можно создать единственный класс, например, который будет автоматически работать с разными типами данных.
Классы, интерфейсы или методы, имеющие дело с параметризованными типами, называются параметризованными или обобщениями, параметризованными (обобщенными) классами или параметризованными (обобщёнными) методами.


Контравариантность — это возможность использовать более широкий тип, там, где ожидается более узкий. В Java она реализуется с помощью ? super Type, позволяя записывать элементы в коллекцию. Например, List<? super Integer> может принимать Integer, Number, или Object, что позволяет вам добавить элемент типа Integer в неё, но чтение может возвращать только Object, так как точный тип неизвестен.

Инвариантность в Java означает отсутствие подстановочности. То есть, если у вас есть List<Number>, то он не совместим ни с List<Integer>, ни с List<Double>. Java требует строгого соответствия типов. Это вносит некоторую ограниченность, но сохраняет типобезопасность. 

Подстановочные символы (wildcards) в Java (?) широко используются для обобщения методов и классов, позволяя им работать с любым типом. Это особенно полезно в методах, где неважно, какого точного типа элементы, лишь бы они не нарушали типовую безопасность. Например, метод printList(List<?>) может принимать список любого типа и выводить его элементы. Wildcards делают код гибче, способствуя переиспользованию кода без потери типовой безопасности.