Вопрос 1
Многопоточность. Ключевые слова volatile, synchronized. Методы notify, notifyAll, wait.

1) Многопоточность
- это есть свойство платформы/приложения, состоящее в том, что порожденный в ОС процесс может состоять из нескольких потоков
которые выполняются параллельно
Процесс - это программа в состоянии выполнения
Поток - минимальная единица выполнения в многозадачной системе которая является частью процесса

2) ключевое слово volatile
- исопльзуется для переменных
- используется для того чтобы гарантировать то что изменения переменной одним потоком будут видны другим потокам
- важно что данный модификатор НЕ обеспечивает атомарность операций, а потому, например операция cnt++ не
 будет потокобезопасной
- переменная с таким ключевым словом всегда читается и записывается из главной памяти

пример:
class Example {
    private volatile boolean running = true;

    public void stop() {
        running = false;
    }

    public void run() {
        while (running) {
            // тут проверка значения потоком в главной памяти
        }
    }
}

3) ключевое слово synchronized
- используется для используется для управления доступом потоков к общим ресурсам.
- обеспечивает взаимное исключение (mutual exclusion) => только один поток может выполнять
синхронизированный блок или метод в определенный момент времени

пример синхронизации метода:
public synchronized void method() {
    // только один поток может выполнять этот метод
}

пример синхронизации блока кода:
public void method() {
    synchronized (this) {
        // только один поток может выполнять этот блок
    }
}

каждый объект в Java имеет монитор (механизм блокировки)
и как раз synchronized блокирует монитор объект ачтобы предотвратить доступ других потоков

пример:
class SynchronizedExample {
    private int count = 0;

    public synchronized void increment() {
        count++;
    }

    public int getCount() {
        return count;
    }
}

стоит отметит что из-за блокировок может снижаться проихводительность synchronized

4) метод notify, метод notifyAll, метод wait
метод notify
- будит один случайный поток который находится в состоянии ожидания (вызвал wait).

метод notifyAll
- будит все потоки, ожидающие на одном мониторе

метод wait
- приостанавливает выполнение потока, освобождая монитор
- вызывается только внутри синхронизированного блока или метода
- поток освобождает монитор, чтобы другие потоки могли выполнить свои действия

пример:
class Example {
    private final Object lock = new Object();
    private boolean ready = false;

    public void producer() throws InterruptedException {
        synchronized (lock) {
            System.out.println("Producer: ready to produce");
            ready = true;
            lock.notify();
        }
    }

    public void consumer() throws InterruptedException {
        synchronized (lock) {
            while (!ready) {
                lock.wait();
            }
            System.out.println("Consumer: consuming");
        }
    }
}

- эти методы помогают потокам взаимодействовать между собой, например
при реализации шаблона производитель-потребитель
- используются внутри synchronized блоков
